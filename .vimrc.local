
" Färger
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" let g:solarized_termtrans=1
let g:solarized_contrast="high"
let g:solarized_visibility="high"
let g:solarized_italic=0
let g:Powerline_theme='long'
let $pd = getcwd()

if has("gui_running")
  set antialias
  highlight clear SignColumn " match SignColumn with bg for vim-gitgutter..
  let g:solarized_termcolors=256
  let g:Powerline_colorscheme='solarized256_dark'
  " set transparency=0

  "Hide toolbar and menus.
  set guioptions-=T
  set guioptions-=m

  " Scrollbar is always off.
  set guioptions-=rL

  " Enable gui tab labels
  set guioptions+=e

  " Disable bell.
  set vb t_vb=

  " Don't flick cursor.
  set guicursor=a:blinkon0

  if $pd == '/Users/anders/rails/urdb19'
    color solarized
    " color white/pyte
  elseif $pd == '/home/rails/urdb19'
    color github256
    highlight NonText guibg=#060606
    highlight Folded  guibg=#0A0A0A guifg=#9090D0
  elseif $pd == '/home/rails/swedmak'
    color solarized
  elseif $pd == '/home/rails/test-driven-rails-app1/todos'
    color solarized
    set lines=30
    set columns=85
  else
    color white/pyte2
  endif

  " Gitv
  highlight diffAdded   guifg=#00bf00 guibg=#9cf9b1
  highlight diffRemoved guifg=#bf0000 guibg=#ffa296

  " color paper/mayansmoke
  " color white/espresso-soda
  " color krunktastic
  " color white/summerfruit
  " color white/summerfruit256
  " vy
  " color paper/newspaper
  " color white/tomorrow
  " color white/fluidvision
  " color white/reliable
  " color paper/peachpuff

  " set background=dark
  " color brown/vilight   "js sass
  " color brown/twilight  "html
  " color railscasts      "ctrl
  " color grey/xoria256
  " color red/tetragrammaton
  " color black/synic
else
  if $pd == '/home/rails/test-driven-rails-app1/todos'
    let g:Powerline_colorscheme='solarized256_dark'
    let g:solarized_termcolors=256
    color solarized
    set lines=30
  else
    " set lines=25
    " set columns=90
    set t_Co=256
    let g:solarized_termcolors= &t_Co
    let g:Powerline_colorscheme='solarized256_light'
    set background=light
    color solarized
    " color white/pyte2
    " color github256
    " color brown/hybrid
    " color codeschool
    " color black/grb256
  endif
endif

if has("win32")
  set gfn=Bitstream_Sans_Mono_for_Powerline:h16:cANSI
  au GUIEnter * simalt ~x

elseif has("mac")
  set gfn=Terminus\ For\ Powerline:h19
  " set gfn=Neep:h15
  " set gfn=Meslo\ LG\ S\ DZ\ for\ Powerline:h16
  " set gfn=Ubuntu\ Mono\ derivative\ Powerline:h19
  " set gfn=Bitstream\ Vera\ Sans\ Mono\ for\ Powerline:h16
  " set gfn=Anonymous\ Pro\ for\ Powerline:h19
  " set gfn=DejaVu\ Sans\ Mono\ for\ Powerline:h16
  " set gfn=Inconsolata:h16
  " set gfn=Menlo:h14"
  " set gfn=M+\ 1m:h16
  " set gfn=Source\ Code\ Pro:h13
  " set gfn=Inconsolata-dz\ for\ Powerline\ 13
  " set gfn=Menlo\ for\ Powerline\ 13
  " set gfn=Monospace\ 13
  " set gfn=Envy\ Code\ R\ 13
elseif has("unix")
  set gfn=Neep\ 15
  set gfn=Terminus\ For\ Powerline\ 14
  " set gfn=Andale\ Mono\ 16
  " set gfn=Meslo\ LG\ M\ DZ\ for\ Powerline\ 14
  " set gfn=Ubuntu\ Mono\ Regular\ 16
  " set gfn=Meslo\ LG\ M\ for\ Powerline\ 15
  " set gfn=Bitstream\ Vera\ Sans\ Mono\ for\ Powerline\ 15
  " set gfn=DejaVu\ Sans\ Mono\ for\ Powerline\ 15
  " set gfn=M+\ 1m\ 16
  " set gfn=Menlo\ for\ Powerline\ 13
  " set gfn=Inconsolata-dz\ for\ Powerline\ 13
  " set gfn=Monospace\ 13
  " set gfn=Envy\ Code\ R\ 13
endif

let Powerline_symbols = 'fancy'
set fillchars+=stl:\ ,stlnc:\
set encoding=utf-8

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Thoughtbot
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" öppna filer
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%
map <leader>h :vnew %%
" map <leader>j :split %%

" vim-rspec mappings
nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>s :call RunNearestSpec()<CR>
nnoremap <Leader>l :call RunLastSpec()<CR>

" Get off my lawn
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>

" ack sökning
map <leader>f :Ack<Space>

" Use Ag (https://github.com/ggreer/the_silver_searcher) instead of Grep
if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor
endif

" Sök inte igenom onödiga filer
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.gz,*.min.js,*.log
set wildignore+=/txt/*,public/*,/log/*,public/assets/*,app/assets/images/*
let g:ctrlp_custom_ignore = {
   \ 'dir':  '\v[\/]\.(git|hg|svn)$|public/*|txt/*|/assets/javascripts/tinymce/*|assets/javascripts/ui/*',
   \ 'file': '\v\.(exe|so|dll|.gz|.log|min.js)$',
   \ }

" Snabba test
let g:rspec_command = "Dispatch zeus rspec {spec}"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPS TO JUMP TO SPECIFIC TARGETS AND FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction

map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gR :call ShowRoutes()<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rails
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>gm :Rmodel<CR>
map <leader>gc :Rcontroller<CR>
map <leader>gv :Rview<CR>
map <leader>gs :Gstatus<CR>

" Higlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Corey Haines
" kill trailing spaces when exiting file
" autocmd BufWritePre * :%s/\s\+$//e

" Highlight ruby operators
let ruby_operators = 1

" Turn off rails bits of statusbar
" let g:rails_statusline = 0

" Paren Rainbow (diff colors for diff nestings)
let g:clj_paren_rainbow = 1

" Auto added used namespaces, generally be awesome
let g:clj_dynamic_highlighting = 1


" NERDCommenter
let NERDDefaultNesting = 0
let NERDRemoveExtraSpaces = 1
let NERDSpaceDelims = 1

" NERDTree CONFIGURATION

" Enable nice colors
let NERDChristmasTree = 1

" Make it easy to see where we are
let NERDTreeHighlightCursorline = 1

" Make bookmarks visible
let NERDTreeShowBookmarks = 1

" Show hidden files
let NERDTreeShowHidden = 1

" Don't hijack NETRW
let NERDTreeHijackNetrw = 0
let NERDTreeIgnore=['\.$', '\~$']

" Make F2 open NERDTree
nmap <F2> :NERDTreeToggle<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Command-T
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
" map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
" map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
" map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
" map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
" map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
" map <leader>ga :CommandTFlush<cr>\|:CommandT app/assets<cr>
" map <leader>gj :CommandTFlush<cr>\|:CommandT app/assets/javascripts<cr>
" map <leader>gs :CommandTFlush<cr>\|:CommandT app/assets/stylesheets<cr>
" map <leader>gf :CommandTFlush<cr>\|:CommandT features<cr>
" map <leader>gt :CommandTFlush<cr>\|:CommandTTag<cr>
" map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
" map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>

" STATUS LINE (hanteras av powerline)
" set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)


" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" Use camel case completion.
"let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
"let g:neocomplcache_enable_underbar_completion = 1

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" rita inte om skärmen i onödan
set lazyredraw

autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vet ej
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set rtp+=~/.vam/vim-addon-manager
"call vam#ActivateAddons(["FuzzyFinder"])
" set foldmethod=syntax

